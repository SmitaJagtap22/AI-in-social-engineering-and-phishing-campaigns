Level 0 → 1
Steps:
Connected to Krypton 1 server using SSH.
Listed the contents and navigated to the /krypton/krypton1 directory.
Read through the README, krypton2, and krypton3 files to gather clues.
Realized that krypton2 was encoded using ROT13 and used the tr command to decode it.
Logged out after retrieving the password.
Tools Used:
SSH for connection, ls to list files, cd for navigation, cat to view file content, tr for ROT13 decryption.
Logic Behind the Solution:
Recognized the ROT13 encoding in the file and decoded it using the appropriate translation method (tr command).


Level 1 → 2
Steps:
Logged into Krypton 2 and navigated to the /krypton/krypton2 directory.
Created a writable directory in /tmp for temporary operations.
Created a file containing "AAAAA" and encrypted it with the provided encryption tool.
Inspected the results to understand how encryption worked.
Decoded krypton3 with ROT13 to proceed.
Logged out after completing the task.
Tools Used:
mkdir to create directories, chmod to adjust permissions, echo for file creation, encryption utility, tr for decoding.
Logic Behind the Solution:
Created an encrypted file to understand how the system encrypts data.
Applied ROT13 on krypton3 to decode it, similar to the previous level.


Level 2 → 3
Steps:
SSH'd into Krypton 3 and navigated to /krypton/krypton3.
Analyzed found1, found2, and other files for clues.
Noticed the frequency of letters in the content and identified the need for frequency analysis.
Wrote a loop to count occurrences of each letter, sorted the results, and compared them to English letter frequency.
Mapped the most common letters to typical English letters and deciphered the message.
Tools Used:
cat to view files, for loops to count letter frequencies, wc to count occurrences, sort to order results, and tr for letter substitution.
Logic Behind the Solution:
Applied frequency analysis based on the common occurrences of letters in the English language to break a substitution cipher.


Level 3 → 4
Steps:
SSH'd into Krypton 4 and navigated to /krypton/krypton4.
Read found1, found2, and any other files that could provide more information.
Opened found1 to examine its contents more closely.
Checked krypton5 for additional clues.
Gained access to the next level after carefully reviewing the information.
Tools Used:
cat to read files, nano to edit files, ls -la to list files with permissions.
Logic Behind the Solution:
Analyzed the contents manually for hidden messages and clues.
Carefully followed the pattern from previous levels to decipher the next stage.


Level 4 → 5
Steps:
Logged into Krypton 5 and went to the /krypton/krypton5 directory.
Listed and read all files in the directory, such as found1, found2, found3, and krypton6.
Processed all available clues to solve the challenge.
Tools Used:
ls for file listing, cat to read files.
Logic Behind the Solution:
Explored all files to ensure no crucial information was missed, leading to the solution.


Level 5 → 6
Steps:
Logged into Krypton 6 and inspected the onetime/ folder.
Created symbolic links to important files, such as keyfile.dat and krypton7.
Created a file named a.txt and encrypted it using the provided encryption tool.
Compared the original plaintext (a.txt) and the encrypted file (cipher.txt) using xxd for a better understanding.
Wrote a Python script to analyze and compare both the files and solve the challenge.
Tools Used:
ln -s to create symbolic links, chmod to adjust permissions, touch for file creation, xxd for binary examination, Python for script automation.
Logic Behind the Solution:
Studied the encryption process, particularly one-time pad encryption, and analyzed the results using binary comparisons and a custom Python script.


Level 6 → 7
Steps:
Logged into Krypton 7 and navigated to /krypton/krypton7.
Carefully read through the README file for the next set of instructions or clues.
Tools Used:
SSH, ls, cat.
Logic Behind the Solution:
Interpreted the README file instructions to understand the next steps.